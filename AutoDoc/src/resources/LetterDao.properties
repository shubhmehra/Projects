#Letters
countLetterListInformation = SELECT COUNT(*) AS count FROM letters
getLetterListInformation = FROM LettersInformation

#Letters
getLetterNamesList = SELECT letter_id, letter_name FROM letters
getLetterNameList = SELECT DISTINCT ltr.letter_id, ltr.letter_name FROM letters ltr, question_answer_templates qa WHERE qa.letter_id = ltr.letter_id ORDER BY ltr.letter_id


#Taxability
countTaxabilityListInformation = SELECT COUNT(*) AS count FROM question_answer_templates
getTaxabilityListInformation = SELECT question_id, letter_id, getLetterName(letter_id) AS letter_name, question_no, question, question_type, default_value, yes_true_value, no_false_value, created_by FROM question_answer_templates

checkQuestionNoExists = SELECT question_id FROM question_answer_templates WHERE question_no = :questionNo AND letter_id = :letterId

#Letter Flow Setting
getQuesListForLetteFlow = SELECT question_id, question_no, question, question_type, default_value, COALESCE(positive_ans_child_id, '0') AS positive_ans_child_id, COALESCE(negative_ans_child_id, '0') AS negative_ans_child_id, letter_id FROM question_answer_templates WHERE letter_id = ? ORDER BY question_id
getChildQuestionIds = SELECT question_id, question_no FROM question_answer_templates WHERE letter_id = ? AND question_id > ? ORDER BY question_id

#GenerateLetter
getTokenNo = select nextval('generated_letter_info_generated_letter_id_seq')
getDataToGenerateLetter = SELECT question_id, question_no, question, question_type, default_value, COALESCE(positive_ans_child_id, '0') AS positive_ans_child_id, COALESCE(negative_ans_child_id, '0') AS negative_ans_child_id, letter_id FROM question_answer_templates WHERE letter_id = :letterId AND ((question_id = :questionId AND :questionId != 0) OR :questionId = 0) ORDER BY question_id  LIMIT 1


#GenerateLetter
#getGeneratedLtrData = FROM GeneratedLtr WHERE tokenNo = :tokenNo
getLetterAndOrgNameUsingLetterId = SELECT a.description, replace(letter_name, ' ', '_') AS letter_name, o.name, o.ref_no FROM letters, system_parameters AS a, organization_information AS o WHERE a.code_type = 'LETTER_PATH' AND o.org_id = 1 AND o.status = 1 AND letter_id  = :letterId

getGeneratedLtrData = SELECT b.question_id, a.token_id, b.question_no, b.question_type, a.answer, c.word_field FROM\tgenerated_letter_info AS a LEFT OUTER JOIN question_answer_templates AS b ON a.question_id \= b.question_id LEFT OUTER JOIN word_fields AS c ON b.word_field \= c.id WHERE\ta.token_id \= \:tokenNo 

getLetterClientIdsUsingTokenId = SELECT client_id, letter_id FROM generated_letter_info WHERE token_id = :tokenNo LIMIT 1
#getAnswersOfQuestion = FROM QATemplates WHERE questionId \= ? 
#SELECT question_id, question_no, question, question_type, default_value FROM question_answer_templates WHERE question_id  = 1

# dndTREE related
#getQuestionListData = SELECT qa.question_id, qa.question_no || ' - ' || qa.question || ' - ' || qa.question_type, qa.child_que_id FROM question_answer_templates qa WHERE qa.letter_id = ? ORDER BY qa.question_id